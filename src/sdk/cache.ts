/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The cache section provide APIs that can be used to perform cache operations.
 */
export class Cache {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates the cache
   */
  create(
    req: operations.CacheCreateCacheRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheCreateCacheResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheCreateCacheRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/create",
      req.pathParams
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient!;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheCreateCacheResponse =
        new operations.CacheCreateCacheResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createCacheResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.CreateCacheResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the cache
   */
  delete(
    req: operations.CacheDeleteCacheRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheDeleteCacheResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheDeleteCacheRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/delete",
      req.pathParams
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient!;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheDeleteCacheResponse =
        new operations.CacheDeleteCacheResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteCacheResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.DeleteCacheResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an entry from cache
   */
  deleteKeys(
    req: operations.CacheDelRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheDelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheDelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/{key}/delete",
      req.pathParams
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient!;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheDelResponse = new operations.CacheDelResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.delResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.DelResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reads an entry from cache
   */
  getKey(
    req: operations.CacheGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/{key}/get",
      req.pathParams
    );

    const client: AxiosInstance = this._securityClient!;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheGetResponse = new operations.CacheGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.GetResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets an entry in the cache and returns the previous value if exists
   */
  getSetKey(
    req: operations.CacheGetSetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheGetSetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheGetSetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/{key}/getset",
      req.pathParams
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient!;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheGetSetResponse =
        new operations.CacheGetSetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSetResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.GetSetResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the caches for the given project
   */
  list(
    req: operations.CacheListCachesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheListCachesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheListCachesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/list",
      req.pathParams
    );

    const client: AxiosInstance = this._securityClient!;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheListCachesResponse =
        new operations.CacheListCachesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCachesResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.ListCachesResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the key for this cache
   */
  listKeys(
    req: operations.CacheKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/keys",
      req.pathParams
    );

    const client: AxiosInstance = this._securityClient!;

    const queryParams: string = utils.serializeQueryParams(req.queryParams);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheKeysResponse =
        new operations.CacheKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keysResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.KeysResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets an entry in the cache
   */
  setKey(
    req: operations.CacheSetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CacheSetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CacheSetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{project}/caches/{name}/{key}/set",
      req.pathParams
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient!;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CacheSetResponse = new operations.CacheSetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setResponse = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.SetResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.deserializeJSONResponse(
              httpRes?.data,
              shared.Status
            );
          }
          break;
      }

      return res;
    });
  }
}
