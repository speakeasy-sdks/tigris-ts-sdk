/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
 */
export enum ErrorCode {
    Ok = "OK",
    Cancelled = "CANCELLED",
    Unknown = "UNKNOWN",
    InvalidArgument = "INVALID_ARGUMENT",
    DeadlineExceeded = "DEADLINE_EXCEEDED",
    NotFound = "NOT_FOUND",
    AlreadyExists = "ALREADY_EXISTS",
    PermissionDenied = "PERMISSION_DENIED",
    ResourceExhausted = "RESOURCE_EXHAUSTED",
    FailedPrecondition = "FAILED_PRECONDITION",
    Aborted = "ABORTED",
    OutOfRange = "OUT_OF_RANGE",
    Unimplemented = "UNIMPLEMENTED",
    Internal = "INTERNAL",
    Unavailable = "UNAVAILABLE",
    DataLoss = "DATA_LOSS",
    Unauthenticated = "UNAUTHENTICATED",
    Conflict = "CONFLICT",
    BadGateway = "BAD_GATEWAY",
    MethodNotAllowed = "METHOD_NOT_ALLOWED",
}

/**
 * The Error type defines a logical error model
 */
export class ErrorT extends SpeakeasyBase {
    /**
     * The status code is a short, machine parsable string, which uniquely identifies the error type. Tigris to HTTP code mapping [here](/reference/http-code)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "code" })
    code?: ErrorCode;

    /**
     * A developer-facing descriptive error message
     */
    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message?: string;
}
